use std::collections::HashMap;

use crate::definitions::{Definition, CustomType};

use super::abi::{CodeGenConfig, CodeGenContext, TypeInfo};

pub struct CodeGenerator<C:CodeGenContext>{config: CodeGenConfig<C>}

impl CodeGenerator {
    pub fn code_gen<C>(definitions: &Vec<Definition>) -> anyhow::Result<()> where C: CodeGenContext{
        let pre_processor = code_gen.get_pre_processor();
        let context = pre_processor.process(&definitions)?;
        let mut packages = HashMap::new();
        for type_info in context.type_dict().values() {
            packages
                .entry(type_info.package.clone())
                .or_insert(Vec::new())
                .push(type_info);
        }
        for (package, types) in packages {
            if let Some(package_writer) = code_gen.get_package_writer() {
                package_writer.write_package(&package, &types, &context)?;
            }
            for type_info in types {
                gen_code_for(type_info, &context, code_gen)?;
            }
        }

        Ok(())
    }

    fn gen_code_for<C>(
        type_info: &TypeInfo,
        context: &C,
        code_gen: &dyn CodeGenConfig<C>,
    ) -> anyhow::Result<()> where C: CodeGenContext{
        let type_writer = code_gen.get_type_writer();
        let mut writer = type_writer.get_writer_for_type(type_info, context)?;
        match &type_info.type_def {
            CustomType::Object { name, fields } => {
                // write type
                type_writer.pre_write_type(&mut writer, type_info, context)?;
                type_writer.pre_write_object(&mut writer, type_info, context)?;
                // write fields
                for field in fields.iter() {
                    type_writer.write_field(&mut writer, field, type_info, context)?;
                }
                type_writer.post_write_object(&mut writer, type_info, context)?;
            }
            CustomType::Enum { name, values } => {
                // write type
                type_writer.pre_write_type(&mut writer, type_info, context)?;
                type_writer.pre_write_enum(&mut writer, type_info, context)?;
                // write fields
                for value in values.iter() {
                    type_writer.write_enum_value(&mut writer, value, type_info, context)?;
                }
                type_writer.post_write_enum(&mut writer, type_info, context)?;
            }
        };
        Ok(())
    }

}
